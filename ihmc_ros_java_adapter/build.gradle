buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath: "org.yaml:snakeyaml:1.16"
    }
}

apply plugin: 'java'

repositories {
    maven {
        url "http://dl.bintray.com/ihmcrobotics/maven-vendor"
    }

    maven {
        url "http://dl.bintray.com/ihmcrobotics/maven-release"
    }

    maven {
        url "https://github.com/rosjava/rosjava_mvn_repo/raw/master"
    }

    maven {
        url "http://clojars.org/repo/"
    }

    maven {
        url "https://bengal.ihmc.us/nexus/content/repositories/thirdparty"
    }

    maven {
        url 'http://updates.jmonkeyengine.org/maven'
    }

    mavenLocal()

    jcenter()

    mavenCentral()
}

/*
 * Disable all of the tasks on the subproject so that invoking gradle commands on this project are quicker.
 * Because integration with the subproject is optional and is achieved using a GradleBuild type task, we
 * don't need to run the tasks here. We invoke them from the buildSourceProject.
 *
 * Also grabs a reference to the top level project of all the subprojects so we can get at its build script
 * later.
 */
subprojects { subproject ->
    rootProject.configure(subproject, {
        subproject.tasks.each {task ->
            task.enabled = false
        }
    })

    if(subproject.getParent().equals(rootProject)) {
        rootProject.ext.set("sourceProject", subproject)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

import us.ihmc.ros.java_adapter.yaml.IHMCROSJavaYamlLoader
task parseYaml {
    if(!project.hasProperty("yaml")) {
        return
    }
    project.ext.configHolder = new IHMCROSJavaYamlLoader().loadYaml(project.yaml)
    configurations.create("ros")

    project.configHolder.dependencyHolder.dependencies.each { dep ->
        project.dependencies.add("ros", dep)
    }
}

task runJava(type: JavaExec, dependsOn: parseYaml) {
    if(!project.hasProperty("yaml")) {
        return
    }
    classpath = configurations.ros
    workingDir = project.projectDir
    maxHeapSize = project.configHolder.vmConfiguration.heapSize
    main = project.configHolder.vmConfiguration.mainMethod
}

task buildSourceProject(type: GradleBuild) {
    buildFile = rootProject.sourceProject.buildFile
    tasks = ['publishAllToMavenLocal']
}

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    if(graph.hasTask(parseYaml) && !project.hasProperty("yaml")) {
        throw new GradleException("Attempting to use the Java execution adapter without setting the yaml location property. Please set the project property \"yaml\" to the location of the yaml configuration.\nFor more information on Gradle properties see https://docs.gradle.org/current/userguide/build_environment.html")
    }
}
